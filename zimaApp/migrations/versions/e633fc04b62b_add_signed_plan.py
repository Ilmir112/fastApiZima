"""add signed plan

Revision ID: e633fc04b62b
Revises: 3aa7ca706f35
Create Date: 2025-08-03 18:45:07.387935

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e633fc04b62b'
down_revision: Union[str, None] = '3aa7ca706f35'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("""
    CREATE TYPE statusworkplan AS ENUM ('NOT_SIGNED', 'PLAN_IS_SIGNED', 'FULLY_NOT_SIGNED');
    """)
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'statusworkplan') THEN
                CREATE TYPE statusworkplan AS ENUM ('NOT_SIGNED', 'PLAN_IS_SIGNED', 'FULLY_NOT_SIGNED');
            END IF;
        END$$;
        """)


    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('wells_repairs', sa.Column('signed_work_plan_path', sa.String(), nullable=True))
    # Добавляем колонку с этим типом
    op.add_column(
        'wells_repairs',
        sa.Column(
            'status_work_plan',
            sa.Enum('NOT_SIGNED', 'PLAN_IS_SIGNED', 'FULLY_NOT_SIGNED', name='statusworkplan'),
            nullable=True
        )
    )
    # op.add_column('wells_repairs', sa.Column('status_work_plan', sa.Enum('NOT_SIGNED', 'PLAN_IS_SIGNED', 'FULLY_NOT_SIGNED', name='statusworkplan'), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('wells_repairs', 'status_work_plan')
    op.drop_column('wells_repairs', 'signed_work_plan_path')
    # ### end Alembic commands ###
